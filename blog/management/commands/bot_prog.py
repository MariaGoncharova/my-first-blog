from datetime import datetime

from logging import getLogger
from django.core.management.base import BaseCommand
from django.conf import settings
from django.shortcuts import get_object_or_404
from telegram.utils.request import Request
from telegram import Bot, ParseMode, ReplyKeyboardRemove
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup
from telegram import Update
from telegram.ext import Updater, CallbackContext
from telegram.ext import CommandHandler
from telegram.ext import MessageHandler
from telegram.ext import Filters
from telegram.ext import CallbackQueryHandler

import blog
from blog.models import Profile, Test, StoreQuestion
from blog.utils import logger_factory

logger = getLogger(__name__)

debug_requests = logger_factory(logger=logger)

# `callback_data` -- —ç—Ç–æ —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å TG –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É.
# –ü–æ—ç—Ç–æ–º—É –∫–∞–∂–¥—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
CALLBACK_BUTTON1 = "callback_button1"
CALLBACK_BUTTON2 = "callback_button2"
CALLBACK_BUTTON3 = "callback_button3"
CALLBACK_BUTTON4 = "callback_button4"
CALLBACK_BUTTON5 = "callback_button5"
CALLBACK_BUTTON_START_TEST = "callback_button_start_test"
CALLBACK_BUTTON_NEXT_QUESTION = "callback_button_next_question"
CALLBACK_BUTTON_HIDE_KEYBOARD = "callback_button9_hide"
CALLBACK_BUTTON_RESULT = "callback_button_result"
CALLBACK_BUTTON_TEST_LIST = "callback_button_test_list"

CALLBACK_BUTTON5_TIME = "callback_button5_time"

TITLES = {
    CALLBACK_BUTTON1: "1Ô∏è‚É£",
    CALLBACK_BUTTON2: "2Ô∏è‚É£",
    CALLBACK_BUTTON3: "Ô∏è3Ô∏è‚É£",
    CALLBACK_BUTTON4: "Ô∏è4Ô∏è‚É£",
    CALLBACK_BUTTON5: "5Ô∏è‚É£",
    CALLBACK_BUTTON_START_TEST: "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚úÖ",
    CALLBACK_BUTTON_NEXT_QUESTION: "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚û°Ô∏è",
    CALLBACK_BUTTON5_TIME: "–í—Ä–µ–º—è ‚è∞",
    CALLBACK_BUTTON_HIDE_KEYBOARD: "–°–ø—Ä—è—Ç–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚¨áÔ∏è",
    CALLBACK_BUTTON_RESULT: "–†–µ–∑—É–ª—å—Ç–∞—Ç üìÑ",
    CALLBACK_BUTTON_TEST_LIST: "–ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤ ‚¨ÖÔ∏è",

}


def log_errors(f):
    def inner(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except Exception as e:
            error_message = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}'
            print(error_message)
            raise e

    return inner


# –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
def get_test_inline_keyboard():
    """ –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
        –≠—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –ø–æ–¥ –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –≥–¥–µ –µ—ë –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏
    """
    # –ö–∞–∂–¥—ã–π —Å–ø–∏—Å–æ–∫ –≤–Ω—É—Ç—Ä–∏ `keyboard` -- —ç—Ç–æ –æ–¥–∏–Ω –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    keyboard = [
        # –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ —Å–ø–∏—Å–∫–∞ -- —ç—Ç–æ –æ–¥–∏–Ω –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü.
        # –°–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ -- —Å—Ç–æ–ª—å–∫–æ —Å—Ç–æ–ª–±—Ü–æ–≤
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON1], callback_data=CALLBACK_BUTTON1),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON2], callback_data=CALLBACK_BUTTON2),
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON3], callback_data=CALLBACK_BUTTON3),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON4], callback_data=CALLBACK_BUTTON4),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON5], callback_data=CALLBACK_BUTTON5),
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_HIDE_KEYBOARD], callback_data=CALLBACK_BUTTON_HIDE_KEYBOARD),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞, –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –∏ —Å—Ç–∞—Ä—Ç
def get_test_start_keyboard():
    keyboard = [
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_START_TEST], callback_data=CALLBACK_BUTTON_START_TEST),
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_TEST_LIST], callback_data=CALLBACK_BUTTON_TEST_LIST),
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_HIDE_KEYBOARD], callback_data=CALLBACK_BUTTON_HIDE_KEYBOARD),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –æ—Ç–≤–µ—Ç–∞
def get_variants_keyboard():
    keyboard = [
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON1], callback_data=CALLBACK_BUTTON1),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON2], callback_data=CALLBACK_BUTTON2),
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON3], callback_data=CALLBACK_BUTTON3),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON4], callback_data=CALLBACK_BUTTON4),
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_HIDE_KEYBOARD], callback_data=CALLBACK_BUTTON_HIDE_KEYBOARD),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –°–ª–µ–¥—É—é—â–µ–º –≤–æ–ø—Ä–æ—Å–µ
def get_next_question_keyboard():
    keyboard = [
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_NEXT_QUESTION], callback_data=CALLBACK_BUTTON_NEXT_QUESTION),
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_HIDE_KEYBOARD], callback_data=CALLBACK_BUTTON_HIDE_KEYBOARD),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ü–æ—Å–ª–µ–¥–Ω–µ–º –≤–æ–ø—Ä–æ—Å–µ –≤–æ–ø—Ä–æ—Å–µ
def get_end_keyboard():
    keyboard = [
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_RESULT], callback_data=CALLBACK_BUTTON_RESULT),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_TEST_LIST], callback_data=CALLBACK_BUTTON_TEST_LIST),
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_HIDE_KEYBOARD], callback_data=CALLBACK_BUTTON_HIDE_KEYBOARD),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


@log_errors
def keyboard_callback_handler(update: Update, context: CallbackContext):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–°–ï–• –∫–Ω–æ–ø–æ–∫ —Å–æ –í–°–ï–• –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    """
    query = update.callback_query
    data = query.data
    now = datetime.now()
    tests_titles = [test.title for test in Test.objects.all()]
    titles = ' '.join(tests_titles)
    tests_id = [test.id for test in Test.objects.all()]
    # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `effective_message`
    chat_id = update.effective_message.chat_id
    current_text = update.effective_message.text

    if data == CALLBACK_BUTTON1:
        query.edit_message_text(
            text=current_text,
            parse_mode=ParseMode.MARKDOWN,
        )
        tests_titles = [test.title for test in Test.objects.all().filter(id=tests_id[0])]
        titles_test = ''.join(tests_titles)
        # –û—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
        context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ—Å—Ç: " + titles_test,
            reply_markup=get_test_start_keyboard(),
        )

    elif data == CALLBACK_BUTTON_START_TEST:
        query.edit_message_text(
            text=current_text,
            parse_mode=ParseMode.MARKDOWN,
        )

        test = get_object_or_404(Test, pk=2)

        # questions = test.questions.filter(close_question=4)

        questions_set = test.questions.all()
        questions_lst = []

        # question = [question.close_question.description for question in questions_set]
        # question_title = ''.join(question)
        answers = [question.close_question.variants for question in questions_set]
        answer_lst = []
        # for answer in answers:
        #     for a in answer.all():
        #         answer_lst.append(a.description)

        for question in questions_set:
            questions_lst.append(question.close_question)

        question_answer_dict = dict(zip(questions_lst, [answer.all() for answer in answers]))
        print(question_answer_dict)

        for a, answer in question_answer_dict.items():
            print(a, answer_lst)
        for question, answer in question_answer_dict.items():
            print(question, answer_lst)

        # –û—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
        for question, answer in question_answer_dict.items():
            print(answer)
            update.message.reply_text(
                chat_id=chat_id,
                text="–≤–æ–ø—Ä–æ—Å: \n" + question.description + '\n –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞: \n' + '\n'.join(
                    [a.description for a in answer.all()]),
                reply_markup=get_next_question_keyboard()
            )
            # context.bot.send_message(
            #     chat_id=chat_id,
            #     text="–≤–æ–ø—Ä–æ—Å: \n" + question.description + '\n –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞: \n' + '\n'.join(
            #         [a.description for a in answer.all()]),
            #     reply_markup=get_next_question_keyboard()
            # )
        # print(questions_lst)



    # elif data == CALLBACK_BUTTON_NEXT_QUESTION:
    #     query.edit_message_text(
    #         text=current_text,
    #         parse_mode=ParseMode.MARKDOWN,
    #     )
    #
    #     test = get_object_or_404(Test, pk=2)
    #     questions = test.questions.filter(close_question=5)
    #     question = [question.close_question.description for question in questions]
    #     question_title = ''.join(question)
    #     answers = [question.close_question.variants for question in questions]
    #     answer_lst = []
    #
    #     for answer in answers:
    #         for a in answer.all():
    #             answer_lst.append(a.description)
    #
    #     answer = ' '.join(answer_lst)
    #     # –û—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
    #     context.bot.send_message(
    #         chat_id=chat_id,
    #         text="–≤–æ–ø—Ä–æ—Å: \n" + question_title + ' –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞: \n' + answer,
    #         reply_markup=get_next_question_keyboard()
    #     )

    elif data == CALLBACK_BUTTON_TEST_LIST:
        # –û—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
        context.bot.send_message(
            chat_id=chat_id,
            text="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã: \n" + titles,
            reply_markup=get_test_inline_keyboard(),
        )

    elif data == CALLBACK_BUTTON_HIDE_KEYBOARD:
        # –°–ø—Ä—è—Ç–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –ú–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ —Ç–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Ç–æ—á–Ω–æ –∑–Ω–∞—Ç—å —á—Ç–æ —É —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ –∫–Ω–æ–ø–æ–∫
        context.bot.send_message(
            chat_id=chat_id,
            text="–°–ø—Ä—è—Ç–∞–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n\n–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –µ—ë –æ–±—Ä–∞—Ç–Ω–æ",
            reply_markup=ReplyKeyboardRemove(),
        )


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
@log_errors
def do_start(update: Update, context: CallbackContext):
    update.message.reply_text(
        text="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n–ù–∞–∂–º–∏—Ç–µ /help –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ–º–æ—â–∏."
             "\n–ù–∞–∂–º–∏—Ç–µ /tests –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤.",
    )


# –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
@log_errors
def do_tests(update: Update, context: CallbackContext):
    tests_titles = [test.title for test in Test.objects.all()]
    titles = ' '.join(tests_titles)
    update.message.reply_text(
        text="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã: " + titles,
        reply_markup=get_test_inline_keyboard(),
    )


@log_errors
def do_help(update: Update, context: CallbackContext):
    update.message.reply_text(
        text="—ç—Ç–æ —É—á–µ–±–Ω—ã–π –±–æ—Ç",
    )


@log_errors
def do_echo(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    text = update.message.text

    # p, _ = Profile.objects.get_or_create(
    #     external_id=chat_id,
    #     defaults={
    #         'name': update.message.from_user.username,
    #     }
    # )

    reply_text = f'–í–∞—à ID = {chat_id}\n{text}'
    update.message.reply_text(
        text=reply_text,
        reply_markup=get_test_inline_keyboard(),
    )


class Command(BaseCommand):
    # help = 'Telegram-bot'

    def handle(self, *args, **options):
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        # 1 -- –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        request = Request(
            connect_timeout=0.5,
            read_timeout=1.0,
        )
        bot = Bot(
            request=request,
            token=settings.TOKEN,
        )
        print(bot.get_me())

        # 2 -- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        updater = Updater(
            bot=bot,
            use_context=True,
        )

        start_handler = CommandHandler('start', do_start)
        help_handler = CommandHandler('help', do_help)
        test_handler = CommandHandler('tests', do_tests)
        message_handler = MessageHandler(Filters.text, do_echo)
        buttons_handler = CallbackQueryHandler(callback=keyboard_callback_handler)
        updater.dispatcher.add_handler(message_handler)
        updater.dispatcher.add_handler(start_handler)
        updater.dispatcher.add_handler(help_handler)
        updater.dispatcher.add_handler(test_handler)
        updater.dispatcher.add_handler(buttons_handler)

        # 3 -- –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        updater.start_polling()
        # –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        updater.idle()
