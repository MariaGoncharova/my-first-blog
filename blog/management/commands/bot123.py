from datetime import datetime

from logging import getLogger
from django.core.management.base import BaseCommand
from django.conf import settings
from telegram.utils.request import Request
from telegram import Bot, ParseMode, ReplyKeyboardRemove
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup
from telegram import Update
from telegram.ext import Updater, CallbackContext
from telegram.ext import CommandHandler
from telegram.ext import MessageHandler
from telegram.ext import Filters
from telegram.ext import CallbackQueryHandler

from blog.models import Profile
from blog.utils import logger_factory

logger = getLogger(__name__)

debug_requests = logger_factory(logger=logger)

# `callback_data` -- —ç—Ç–æ —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å TG –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É.
# –ü–æ—ç—Ç–æ–º—É –∫–∞–∂–¥—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
CALLBACK_BUTTON1_LEFT = "callback_button1_left"
CALLBACK_BUTTON2_RIGHT = "callback_button2_right"
CALLBACK_BUTTON3_MORE = "callback_button3_more"
CALLBACK_BUTTON4_BACK = "callback_button4_back"
CALLBACK_BUTTON5_TIME = "callback_button5_time"
CALLBACK_BUTTON6_PRICE = "callback_button6_price"
CALLBACK_BUTTON7_PRICE = "callback_button7_price"
CALLBACK_BUTTON8_PRICE = "callback_button8_price"
CALLBACK_BUTTON_HIDE_KEYBOARD = "callback_button9_hide"
CALLBACK_BUTTON1 = "callback_button1"
CALLBACK_BUTTON2 = "callback_button2"
CALLBACK_BUTTON3 = "callback_button3"
CALLBACK_BUTTON4 = "callback_button4"
CALLBACK_BUTTON5 = "callback_button5"
CALLBACK_BUTTON_NEXT_QUESTION = "callback_button_next_question"
CALLBACK_BUTTON_PREV_QUESTION = "callback_button_prev_question"
CALLBACK_BUTTON_START_TEST = "callback_button_start_test"

TITLES = {
    CALLBACK_BUTTON1_LEFT: "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚ö°Ô∏è",
    CALLBACK_BUTTON2_RIGHT: "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úèÔ∏è",
    CALLBACK_BUTTON3_MORE: "–ï—â—ë ‚û°Ô∏è",
    CALLBACK_BUTTON4_BACK: "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è",
    CALLBACK_BUTTON5_TIME: "–í—Ä–µ–º—è ‚è∞",
    CALLBACK_BUTTON6_PRICE: "BTC üí∞",
    CALLBACK_BUTTON7_PRICE: "LTC üí∞",
    CALLBACK_BUTTON8_PRICE: "ETH üí∞",
    CALLBACK_BUTTON_HIDE_KEYBOARD: "–°–ø—Ä—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É",
    CALLBACK_BUTTON1: "1Ô∏è‚É£",
    CALLBACK_BUTTON2: "2Ô∏è‚É£",
    CALLBACK_BUTTON3: "Ô∏è3Ô∏è‚É£",
    CALLBACK_BUTTON4: "Ô∏è4Ô∏è‚É£",
    CALLBACK_BUTTON5: "5Ô∏è‚É£",
    CALLBACK_BUTTON_NEXT_QUESTION: "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚û°Ô∏è",
    CALLBACK_BUTTON_PREV_QUESTION: "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å ‚û°Ô∏è",
    CALLBACK_BUTTON_START_TEST: "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚úÖ",
}


def log_errors(f):
    def inner(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except Exception as e:
            error_message = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}'
            print(error_message)
            raise e

    return inner


# –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
def get_test_inline_keyboard():
    """ –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
        –≠—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –ø–æ–¥ –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –≥–¥–µ –µ—ë –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏
    """
    # –ö–∞–∂–¥—ã–π —Å–ø–∏—Å–æ–∫ –≤–Ω—É—Ç—Ä–∏ `keyboard` -- —ç—Ç–æ –æ–¥–∏–Ω –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    keyboard = [
        # –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ —Å–ø–∏—Å–∫–∞ -- —ç—Ç–æ –æ–¥–∏–Ω –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü.
        # –°–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ -- —Å—Ç–æ–ª—å–∫–æ —Å—Ç–æ–ª–±—Ü–æ–≤
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON1], callback_data=CALLBACK_BUTTON1),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON2], callback_data=CALLBACK_BUTTON2),
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON3], callback_data=CALLBACK_BUTTON3),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON4], callback_data=CALLBACK_BUTTON4),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON5], callback_data=CALLBACK_BUTTON5),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


# –ö–Ω–æ–ø–∫–∏ –≤–ø–µ—Ä–µ–¥ –∏ –Ω–∞–∑–∞–¥ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç
def get_test_inline_keyboard():
    keyboard = [
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_NEXT_QUESTION], callback_data=CALLBACK_BUTTON_NEXT_QUESTION),
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_PREV_QUESTION], callback_data=CALLBACK_BUTTON_PREV_QUESTION),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


# –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç –∏ –Ω–∞–∑–∞–¥ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞
def get_test_start_keyboard():
    keyboard = [
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_START_TEST], callback_data=CALLBACK_BUTTON_START_TEST),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON4_BACK], callback_data=CALLBACK_BUTTON4_BACK),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


def get_base_inline_keyboard():
    keyboard = [
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON1_LEFT], callback_data=CALLBACK_BUTTON1_LEFT),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON2_RIGHT], callback_data=CALLBACK_BUTTON2_RIGHT),
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_HIDE_KEYBOARD], callback_data=CALLBACK_BUTTON_HIDE_KEYBOARD),
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON3_MORE], callback_data=CALLBACK_BUTTON3_MORE),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


def get_keyboard2():
    """ –ü–æ–ª—É—á–∏—Ç—å –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø–µ—Ä–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    """
    keyboard = [
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON5_TIME], callback_data=CALLBACK_BUTTON5_TIME),
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON6_PRICE], callback_data=CALLBACK_BUTTON6_PRICE),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON7_PRICE], callback_data=CALLBACK_BUTTON7_PRICE),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON8_PRICE], callback_data=CALLBACK_BUTTON8_PRICE),
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON4_BACK], callback_data=CALLBACK_BUTTON4_BACK),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


@log_errors
def keyboard_callback_handler(update: Update, context: CallbackContext):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–°–ï–• –∫–Ω–æ–ø–æ–∫ —Å–æ –í–°–ï–• –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    """
    query = update.callback_query
    data = query.data
    now = datetime.now()

    # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `effective_message`
    chat_id = update.effective_message.chat_id
    current_text = update.effective_message.text

    if data == CALLBACK_BUTTON1_LEFT:
        # "–£–¥–∞–ª–∏–º" –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        # (–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ —Ç–∞–∫, —á—Ç–æ —Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ—Ç –∂–µ, –∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–ø–∞–¥—ë—Ç)
        query.edit_message_text(
            text=current_text,
            parse_mode=ParseMode.MARKDOWN,
        )
        # –û—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
        context.bot.send_message(
            chat_id=chat_id,
            text="–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\ncallback_query.data={}".format(data),
            reply_markup=get_base_inline_keyboard(),
        )
    elif data == CALLBACK_BUTTON2_RIGHT:
        # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        query.edit_message_text(
            text="–£—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {}".format(now),
            reply_markup=get_base_inline_keyboard(),
        )
    elif data == CALLBACK_BUTTON3_MORE:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        # (–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç, –Ω–æ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫)
        query.edit_message_text(
            text=current_text,
            reply_markup=get_keyboard2(),
        )
    elif data == CALLBACK_BUTTON4_BACK:
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        # (–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç, –Ω–æ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫)
        query.edit_message_text(
            text=current_text,
            reply_markup=get_base_inline_keyboard(),
        )
    elif data == CALLBACK_BUTTON5_TIME:
        # –ü–æ–∫–∞–∂–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –æ—Å—Ç–∞–≤–∏–º —Ç—É –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        text = "*–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è*\n\n{}".format(now)
        query.edit_message_text(
            text=text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_keyboard2(),
        )
    elif data in (CALLBACK_BUTTON6_PRICE, CALLBACK_BUTTON7_PRICE, CALLBACK_BUTTON8_PRICE):
        pair = {
            CALLBACK_BUTTON6_PRICE: "USD-BTC",
            CALLBACK_BUTTON7_PRICE: "USD-LTC",
            CALLBACK_BUTTON8_PRICE: "USD-ETH",
        }[data]

    elif data == CALLBACK_BUTTON_HIDE_KEYBOARD:
        # –°–ø—Ä—è—Ç–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –ú–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ —Ç–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Ç–æ—á–Ω–æ –∑–Ω–∞—Ç—å —á—Ç–æ —É —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ –∫–Ω–æ–ø–æ–∫
        context.bot.send_message(
            chat_id=chat_id,
            text="–°–ø—Ä—è—Ç–∞–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n\n–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –µ—ë –æ–±—Ä–∞—Ç–Ω–æ",
            reply_markup=ReplyKeyboardRemove(),
        )

    elif data == CALLBACK_BUTTON1:
        # –ü–æ–∫–∞–∂–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –æ—Å—Ç–∞–≤–∏–º —Ç—É –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        text = "*–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ—Å—Ç*\n\n{}".format(now)
        # TODO: —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ —Ç–µ—Å—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª–∏
        context.bot.send_message(
            text=text,
            reply_markup=get_test_start_keyboard(),
        )

    elif data == CALLBACK_BUTTON_START_TEST:
        # "–£–¥–∞–ª–∏–º" –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        # (–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ —Ç–∞–∫, —á—Ç–æ —Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ—Ç –∂–µ, –∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–ø–∞–¥—ë—Ç)
        query.edit_message_text(
            text=current_text,
            parse_mode=ParseMode.MARKDOWN,
        )
        # –û—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
        context.bot.send_message(
            text="1 –≤–æ–ø—Ä–æ—Å".format(data),
            reply_markup=get_base_inline_keyboard(),
        )


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
@log_errors
def do_start(update: Update, context: CallbackContext):
    update.message.reply_text(
        text="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n–ù–∞–∂–º–∏—Ç–µ /help –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ–º–æ—â–∏.\n",
        reply_markup=get_base_inline_keyboard(),
    )


@log_errors
def do_help(update: Update, context: CallbackContext):
    update.message.reply_text(
        text="—ç—Ç–æ —É—á–µ–±–Ω—ã–π –±–æ—Ç",
    )


@log_errors
def do_echo(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    text = update.message.text

    # p, _ = Profile.objects.get_or_create(
    #     external_id=chat_id,
    #     defaults={
    #         'name': update.message.from_user.username,
    #     }
    # )

    reply_text = f'–í–∞—à ID = {chat_id}\n{text}'
    update.message.reply_text(
        text=reply_text,
        reply_markup=get_test_inline_keyboard(),
    )


class Command(BaseCommand):
    # help = 'Telegram-bot'

    def handle(self, *args, **options):
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        # 1 -- –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        request = Request(
            connect_timeout=0.5,
            read_timeout=1.0,
        )
        bot = Bot(
            request=request,
            token=settings.TOKEN,
        )
        print(bot.get_me())

        # 2 -- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        updater = Updater(
            bot=bot,
            use_context=True,
        )

        start_handler = CommandHandler('start', do_start)
        help_handler = CommandHandler('help', do_help)
        message_handler = MessageHandler(Filters.text, do_echo)
        buttons_handler = CallbackQueryHandler(callback=keyboard_callback_handler)
        updater.dispatcher.add_handler(message_handler)
        updater.dispatcher.add_handler(start_handler)
        updater.dispatcher.add_handler(help_handler)
        updater.dispatcher.add_handler(buttons_handler)

        # 3 -- –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        updater.start_polling()
        # –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        updater.idle()
